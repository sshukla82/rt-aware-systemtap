set test "vta-test"
set ::result_string {i: 0x6
i: 0xdeadbeef
i: 0xdeadbeef87654321}

# Test 32-on-64 when available
set arches [list "-default"]
switch -regexp $::tcl_platform(machine) {
    {^(x86_64|ppc64)$} { lappend arches "-m32" }
    {^s390x$} { lappend arches "-m31" }
}

foreach arch $arches {

verbose "testing vta $arch"

set test_flags "additional_flags=-g"
set test_flags "$test_flags additional_flags=-O2"
set test_flags "$test_flags [sdt_includes]"

if {$arch != "-default"} {
  set test_flags "$test_flags additional_flags=$arch"
}

set res [target_compile $srcdir/$subdir/$test.c ${test}${arch}.exe executable "$test_flags"]
if { $res != "" } {
  verbose "target_compile ${test}${arch} failed: $res" 2
  fail "${test}.c compile ${arch}"
  untested "${test}${arch}"
  return
} else {
  pass "${test}.c compile ${arch}"
}

# Test only when we are running an install test (can execute) and when gcc
# vta generated DW_OP_{stack|implicit}_values for us. See PR10417.
if {[installtest_p] && [uprobes_p]} {
  # See if GCC produce DW_OP_implicit_value and/or DW_OP_stack_value for us.
  set regexp {[stack|implicit]_value}
  if {![catch {exec readelf --debug-dump=loc ${test}${arch}.exe | egrep "$regexp"}]} {
    stap_run3 ${test}${arch} $srcdir/$subdir/$test.stp ./${test}${arch}.exe -c ./${test}${arch}.exe
  } {
    untested "${test}${arch} (no-gcc-vta)"
  }
} else {
  untested "${test}${arch}"
}
catch {exec rm -f ${test}${arch}.exe}

}
